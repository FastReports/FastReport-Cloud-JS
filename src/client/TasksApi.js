/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTaskBaseVM from '../models/CreateTaskBaseVM';
import ProblemDetails from '../models/ProblemDetails';
import RunTaskBaseVM from '../models/RunTaskBaseVM';
import TaskBaseVM from '../models/TaskBaseVM';
import TasksVM from '../models/TasksVM';

/**
* Tasks service.
* @module client/TasksApi
* @version v1
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:client/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new task
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateTaskBaseVM} opts.createTaskBaseVM task's view model. You have to specify task type (type: \"ExportTemplate\")
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/TaskBaseVM} and HTTP response
     */
    tasksCreateTaskWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createTaskBaseVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = TaskBaseVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new task
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateTaskBaseVM} opts.createTaskBaseVM task's view model. You have to specify task type (type: \"ExportTemplate\")
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/TaskBaseVM}
     */
    tasksCreateTask(opts) {
      return this.tasksCreateTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a task from a storage
     * @param {String} taskId deleting task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    tasksDeleteTaskWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling tasksDeleteTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a task from a storage
     * @param {String} taskId deleting task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    tasksDeleteTask(taskId) {
      return this.tasksDeleteTaskWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a task by a specified id
     * @param {String} taskId a task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/TaskBaseVM} and HTTP response
     */
    tasksGetWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling tasksGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskBaseVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a task by a specified id
     * @param {String} taskId a task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/TaskBaseVM}
     */
    tasksGet(taskId) {
      return this.tasksGetWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get tasks list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of tasks, that have to be skipped (default to 0)
     * @param {Number} opts.take number of tasks, that have to be returned (default to 10)
     * @param {String} opts.subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/TasksVM} and HTTP response
     */
    tasksGetListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get tasks list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of tasks, that have to be skipped (default to 0)
     * @param {Number} opts.take number of tasks, that have to be returned (default to 10)
     * @param {String} opts.subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/TasksVM}
     */
    tasksGetList(opts) {
      return this.tasksGetListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a task from request body
     * @param {Object} opts Optional parameters
     * @param {module:models/RunTaskBaseVM} opts.runTaskBaseVM task's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    tasksRunTaskWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['runTaskBaseVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run a task from request body
     * @param {Object} opts Optional parameters
     * @param {module:models/RunTaskBaseVM} opts.runTaskBaseVM task's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    tasksRunTask(opts) {
      return this.tasksRunTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a task by id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    tasksRunTaskByIdWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling tasksRunTaskById");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/tasks/{taskId}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run a task by id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    tasksRunTaskById(taskId) {
      return this.tasksRunTaskByIdWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
