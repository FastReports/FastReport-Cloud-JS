/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKeyVM from '../models/ApiKeyVM';
import ApiKeysVM from '../models/ApiKeysVM';
import CreateApiKeyVM from '../models/CreateApiKeyVM';
import DeleteApiKeyVM from '../models/DeleteApiKeyVM';
import ProblemDetails from '../models/ProblemDetails';

/**
* ApiKeys service.
* @module client/ApiKeysApi
* @version v1
*/
export default class ApiKeysApi {

    /**
    * Constructs a new ApiKeysApi. 
    * @alias module:client/ApiKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new apikey, 5 apikeys for user. Hardcoded for ddos.
     * @param {module:models/CreateApiKeyVM} createApiKeyVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ApiKeyVM} and HTTP response
     */
    apiKeysCreateApiKeyWithHttpInfo(createApiKeyVM) {
      let postBody = createApiKeyVM;
      // verify the required parameter 'createApiKeyVM' is set
      if (createApiKeyVM === undefined || createApiKeyVM === null) {
        throw new Error("Missing the required parameter 'createApiKeyVM' when calling apiKeysCreateApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ApiKeyVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/ApiKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new apikey, 5 apikeys for user. Hardcoded for ddos.
     * @param {module:models/CreateApiKeyVM} createApiKeyVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ApiKeyVM}
     */
    apiKeysCreateApiKey(createApiKeyVM) {
      return this.apiKeysCreateApiKeyWithHttpInfo(createApiKeyVM)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an apikey
     * @param {module:models/DeleteApiKeyVM} deleteApiKeyVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ApiKeyVM} and HTTP response
     */
    apiKeysDeleteApiKeyWithHttpInfo(deleteApiKeyVM) {
      let postBody = deleteApiKeyVM;
      // verify the required parameter 'deleteApiKeyVM' is set
      if (deleteApiKeyVM === undefined || deleteApiKeyVM === null) {
        throw new Error("Missing the required parameter 'deleteApiKeyVM' when calling apiKeysDeleteApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ApiKeyVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/ApiKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an apikey
     * @param {module:models/DeleteApiKeyVM} deleteApiKeyVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ApiKeyVM}
     */
    apiKeysDeleteApiKey(deleteApiKeyVM) {
      return this.apiKeysDeleteApiKeyWithHttpInfo(deleteApiKeyVM)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list with all apikeys of current user
     * Always work, it should make only 200 response (except if user is not authorized).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ApiKeysVM} and HTTP response
     */
    apiKeysGetApiKeysWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeysVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/ApiKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns list with all apikeys of current user
     * Always work, it should make only 200 response (except if user is not authorized).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ApiKeysVM}
     */
    apiKeysGetApiKeys() {
      return this.apiKeysGetApiKeysWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
