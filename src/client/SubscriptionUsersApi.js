/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../models/ProblemDetails';
import SubscriptionUsersVM from '../models/SubscriptionUsersVM';

/**
* SubscriptionUsers service.
* @module client/SubscriptionUsersApi
* @version v1
*/
export default class SubscriptionUsersApi {

    /**
    * Constructs a new SubscriptionUsersApi. 
    * @alias module:client/SubscriptionUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a user to the subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {String} userId Idenitifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    subscriptionUsersAddUserWithHttpInfo(subscriptionId, userId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsersAddUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling subscriptionUsersAddUser");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/Subscriptions/{subscriptionId}/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a user to the subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {String} userId Idenitifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    subscriptionUsersAddUser(subscriptionId, userId) {
      return this.subscriptionUsersAddUserWithHttpInfo(subscriptionId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all users of subscription
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip How many entities skip (default to 0)
     * @param {Number} opts.take How many entities take (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SubscriptionUsersVM} and HTTP response
     */
    subscriptionUsersGetUsersWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsersGetUsers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionUsersVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/Subscriptions/{subscriptionId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all users of subscription
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip How many entities skip (default to 0)
     * @param {Number} opts.take How many entities take (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SubscriptionUsersVM}
     */
    subscriptionUsersGetUsers(subscriptionId, opts) {
      return this.subscriptionUsersGetUsersWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Allows user to leave subscription,.
     * @param {String} subscriptionId Idenitifier of subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    subscriptionUsersLeaveSubscripitonWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsersLeaveSubscripiton");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/Subscriptions/{subscriptionId}/leave', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allows user to leave subscription,.
     * @param {String} subscriptionId Idenitifier of subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    subscriptionUsersLeaveSubscripiton(subscriptionId) {
      return this.subscriptionUsersLeaveSubscripitonWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user from the subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {String} userId Idenitifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    subscriptionUsersRemoveUserWithHttpInfo(subscriptionId, userId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsersRemoveUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling subscriptionUsersRemoveUser");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/Subscriptions/{subscriptionId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user from the subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * @param {String} subscriptionId Idenitifier of subscription
     * @param {String} userId Idenitifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    subscriptionUsersRemoveUser(subscriptionId, userId) {
      return this.subscriptionUsersRemoveUserWithHttpInfo(subscriptionId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
