/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditActionsVM from '../models/AuditActionsVM';
import BreadcrumbsVM from '../models/BreadcrumbsVM';
import CountVM from '../models/CountVM';
import CreateFileShareVM from '../models/CreateFileShareVM';
import ExportReportVM from '../models/ExportReportVM';
import ExportVM from '../models/ExportVM';
import FileIconVM from '../models/FileIconVM';
import FilePermissionCRUDVM from '../models/FilePermissionCRUDVM';
import FilePermissionsVM from '../models/FilePermissionsVM';
import FileRenameVM from '../models/FileRenameVM';
import FileSharingKeysVM from '../models/FileSharingKeysVM';
import FileSorting from '../models/FileSorting';
import FileTagsUpdateVM from '../models/FileTagsUpdateVM';
import FileVM from '../models/FileVM';
import FilesVM from '../models/FilesVM';
import FolderIconVM from '../models/FolderIconVM';
import FolderRenameVM from '../models/FolderRenameVM';
import FolderSizeVM from '../models/FolderSizeVM';
import FolderTagsUpdateVM from '../models/FolderTagsUpdateVM';
import PreviewReportVM from '../models/PreviewReportVM';
import ProblemDetails from '../models/ProblemDetails';
import ReportCreateVM from '../models/ReportCreateVM';
import ReportFolderCreateVM from '../models/ReportFolderCreateVM';
import ReportVM from '../models/ReportVM';
import ReportsVM from '../models/ReportsVM';
import SelectedFilesVM from '../models/SelectedFilesVM';
import UpdateFilePermissionsVM from '../models/UpdateFilePermissionsVM';

/**
* Reports service.
* @module client/ReportsApi
* @version v1
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:client/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileClearRecycleBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/ClearRecycleBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileClearRecycleBin(subscriptionId) {
      return this.reportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileCopyFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/CopyFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileCopyFiles(subscriptionId, opts) {
      return this.reportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    reportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileCountRecycleBinFoldersAndFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/CountRecycleBinFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    reportFolderAndFileCountRecycleBinFoldersAndFiles(subscriptionId, opts) {
      return this.reportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileDeleteFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/DeleteFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileDeleteFiles(subscriptionId, opts) {
      return this.reportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern string, that must be incuded in file or folder name to be counted <br />              (leave undefined to count all files and folders)
     * @param {Boolean} opts.useRegex set this to true if you want to use regular expression to search (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    reportFolderAndFileGetCountWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFolderAndFileGetCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/CountFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern string, that must be incuded in file or folder name to be counted <br />              (leave undefined to count all files and folders)
     * @param {Boolean} opts.useRegex set this to true if you want to use regular expression to search (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    reportFolderAndFileGetCount(id, opts) {
      return this.reportFolderAndFileGetCountWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    reportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFolderAndFileGetFoldersAndFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/ListFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    reportFolderAndFileGetFoldersAndFiles(id, opts) {
      return this.reportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileGetRecycleBinFoldersAndFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/ListRecycleBinFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    reportFolderAndFileGetRecycleBinFoldersAndFiles(subscriptionId, opts) {
      return this.reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileMoveFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/MoveFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileMoveFiles(subscriptionId, opts) {
      return this.reportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileMoveFilesToBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/ToBin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileMoveFilesToBin(subscriptionId, opts) {
      return this.reportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileRecoverAllFromRecycleBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/RecoverRecycleBin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileRecoverAllFromRecycleBin(subscriptionId) {
      return this.reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportFolderAndFileRecoverFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{subscriptionId}/RecoverFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFolderAndFileRecoverFiles(subscriptionId, opts) {
      return this.reportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder, calculate it's size
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FolderSizeVM} and HTTP response
     */
    reportFoldersCalculateFolderSizeWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersCalculateFolderSize");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FolderSizeVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder, calculate it's size
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FolderSizeVM}
     */
    reportFoldersCalculateFolderSize(id) {
      return this.reportFoldersCalculateFolderSizeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersCopyFolderWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersCopyFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling reportFoldersCopyFolder");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Copy/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersCopyFolder(id, folderId) {
      return this.reportFoldersCopyFolderWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFoldersDeleteFolderWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersDeleteFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFoldersDeleteFolder(id) {
      return this.reportFoldersDeleteFolderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export specified report folder to a specified format
     * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
     * @param {String} id report folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportReportVM} opts.exportReportVM export parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersExportWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['exportReportVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export specified report folder to a specified format
     * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
     * @param {String} id report folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportReportVM} opts.exportReportVM export parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersExport(id, opts) {
      return this.reportFoldersExportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BreadcrumbsVM} and HTTP response
     */
    reportFoldersGetBreadcrumbsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersGetBreadcrumbs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BreadcrumbsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Breadcrumbs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BreadcrumbsVM}
     */
    reportFoldersGetBreadcrumbs(id) {
      return this.reportFoldersGetBreadcrumbsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersGetFolderWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersGetFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersGetFolder(id) {
      return this.reportFoldersGetFolderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    reportFoldersGetFoldersWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersGetFolders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/ListFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    reportFoldersGetFolders(id, opts) {
      return this.reportFoldersGetFoldersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    reportFoldersGetFoldersCountWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersGetFoldersCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/CountFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    reportFoldersGetFoldersCount(id) {
      return this.reportFoldersGetFoldersCountWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user's permissions for a folder by id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionCRUDVM} and HTTP response
     */
    reportFoldersGetMyPermissionsWithHttpInfo(folderId) {
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling reportFoldersGetMyPermissions");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionCRUDVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{folderId}/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user's permissions for a folder by id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionCRUDVM}
     */
    reportFoldersGetMyPermissions(folderId) {
      return this.reportFoldersGetMyPermissionsWithHttpInfo(folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name folder name
     * @param {String} opts.subscriptionId subscriptionId
     * @param {String} opts.parentId parent folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersGetOrCreateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'subscriptionId': opts['subscriptionId'],
        'parentId': opts['parentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/getOrCreate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name folder name
     * @param {String} opts.subscriptionId subscriptionId
     * @param {String} opts.parentId parent folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersGetOrCreate(opts) {
      return this.reportFoldersGetOrCreateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folder permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    reportFoldersGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folder permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    reportFoldersGetPermissions(id) {
      return this.reportFoldersGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user's root folder (without parents)
     * > Breakchange. Now user model doesn't contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscriptionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersGetRootFolderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user's root folder (without parents)
     * > Breakchange. Now user model doesn't contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscriptionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersGetRootFolder(opts) {
      return this.reportFoldersGetRootFolderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersMoveFolderWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersMoveFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling reportFoldersMoveFolder");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Move/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersMoveFolder(id, folderId) {
      return this.reportFoldersMoveFolderWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFoldersMoveFolderToBinWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersMoveFolderToBin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/ToBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFoldersMoveFolderToBin(id) {
      return this.reportFoldersMoveFolderToBinWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param {String} id Identifier of parent folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportFolderCreateVM} opts.reportFolderCreateVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersPostFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['reportFolderCreateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersPostFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Folder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param {String} id Identifier of parent folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportFolderCreateVM} opts.reportFolderCreateVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersPostFolder(id, opts) {
      return this.reportFoldersPostFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFoldersRecoverFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersRecoverFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recoveryPath': opts['recoveryPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFoldersRecoverFolder(id, opts) {
      return this.reportFoldersRecoverFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderRenameVM} opts.folderRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersRenameFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderRenameVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersRenameFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderRenameVM} opts.folderRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersRenameFolder(id, opts) {
      return this.reportFoldersRenameFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a folder's icon
     * User with a Update Icon permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderIconVM} opts.folderIconVM Update icon model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersUpdateIconWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderIconVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersUpdateIcon");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/Icon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a folder's icon
     * User with a Update Icon permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderIconVM} opts.folderIconVM Update icon model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersUpdateIcon(id, opts) {
      return this.reportFoldersUpdateIconWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportFoldersUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateFilePermissionsVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportFoldersUpdatePermissions(id, opts) {
      return this.reportFoldersUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderTagsUpdateVM} opts.folderTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    reportFoldersUpdateTagsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderTagsUpdateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportFoldersUpdateTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/UpdateTags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderTagsUpdateVM} opts.folderTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    reportFoldersUpdateTags(id, opts) {
      return this.reportFoldersUpdateTagsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy file to a specified folder
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsCopyFileWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsCopyFile");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling reportsCopyFile");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Copy/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy file to a specified folder
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsCopyFile(id, folderId) {
      return this.reportsCopyFileWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateFileShareVM} opts.createFileShareVM parameters for sharing key creation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileSharingKeysVM} and HTTP response
     */
    reportsCreateSharingKeyWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['createFileShareVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsCreateSharingKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileSharingKeysVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/sharingKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateFileShareVM} opts.createFileShareVM parameters for sharing key creation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileSharingKeysVM}
     */
    reportsCreateSharingKey(id, opts) {
      return this.reportsCreateSharingKeyWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportsDeleteFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsDeleteFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportsDeleteFile(id) {
      return this.reportsDeleteFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * @param {String} id file id
     * @param {String} key key to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportsDeleteSharingKeyWithHttpInfo(id, key) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsDeleteSharingKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling reportsDeleteSharingKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/sharingKey', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * @param {String} id file id
     * @param {String} key key to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportsDeleteSharingKey(id, key) {
      return this.reportsDeleteSharingKeyWithHttpInfo(id, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export specified report to a specified format
     * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
     * @param {String} id report id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportReportVM} opts.exportReportVM export parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    reportsExportWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['exportReportVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export specified report to a specified format
     * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
     * @param {String} id report id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportReportVM} opts.exportReportVM export parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    reportsExport(id, opts) {
      return this.reportsExportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get reports by specified task id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportsVM} and HTTP response
     */
    reportsGetByTaskIdWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling reportsGetByTaskId");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/Task/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get reports by specified task id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportsVM}
     */
    reportsGetByTaskId(taskId) {
      return this.reportsGetByTaskIdWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get report by specified task message id
     * @param {String} taskMessageId task message id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsGetByTaskMessageIdWithHttpInfo(taskMessageId) {
      let postBody = null;
      // verify the required parameter 'taskMessageId' is set
      if (taskMessageId === undefined || taskMessageId === null) {
        throw new Error("Missing the required parameter 'taskMessageId' when calling reportsGetByTaskMessageId");
      }

      let pathParams = {
        'taskMessageId': taskMessageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/TaskMessage/{taskMessageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get report by specified task message id
     * @param {String} taskMessageId task message id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsGetByTaskMessageId(taskMessageId) {
      return this.reportsGetByTaskMessageIdWithHttpInfo(taskMessageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified file
     * User with Get Entity permission can access this method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsGetFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified file
     * User with Get Entity permission can access this method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsGetFile(id) {
      return this.reportsGetFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of actions, performed on this file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AuditActionsVM} and HTTP response
     */
    reportsGetFileHistoryWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetFileHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditActionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns list of actions, performed on this file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AuditActionsVM}
     */
    reportsGetFileHistory(id, opts) {
      return this.reportsGetFileHistoryWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    reportsGetFilesCountWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetFilesCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/CountFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    reportsGetFilesCount(id) {
      return this.reportsGetFilesCountWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all files from specified folder. <br />  User with Get Entity permission can access this method. <br />  The method will returns minimal infomration about the file: <br />  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {String} opts.searchPattern 
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportsVM} and HTTP response
     */
    reportsGetFilesListWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetFilesList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'searchPattern': opts['searchPattern'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/ListFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all files from specified folder. <br />  User with Get Entity permission can access this method. <br />  The method will returns minimal infomration about the file: <br />  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {String} opts.searchPattern 
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportsVM}
     */
    reportsGetFilesList(id, opts) {
      return this.reportsGetFilesListWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user's permissions to file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionCRUDVM} and HTTP response
     */
    reportsGetMyPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetMyPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionCRUDVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current user's permissions to file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionCRUDVM}
     */
    reportsGetMyPermissions(id) {
      return this.reportsGetMyPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    reportsGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    reportsGetPermissions(id) {
      return this.reportsGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all sharing keys, associated with the file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileSharingKeysVM} and HTTP response
     */
    reportsGetSharingKeysWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsGetSharingKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileSharingKeysVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/sharingKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all sharing keys, associated with the file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileSharingKeysVM}
     */
    reportsGetSharingKeys(id) {
      return this.reportsGetSharingKeysWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsMoveFileWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsMoveFile");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling reportsMoveFile");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Move/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsMoveFile(id, folderId) {
      return this.reportsMoveFileWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportsMoveFileToBinWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsMoveFileToBin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/ToBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportsMoveFileToBin(id) {
      return this.reportsMoveFileToBinWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportsRecoverFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsRecoverFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recoveryPath': opts['recoveryPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportsRecoverFile(id, opts) {
      return this.reportsRecoverFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileRenameVM} opts.fileRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsRenameFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileRenameVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsRenameFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileRenameVM} opts.fileRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsRenameFile(id, opts) {
      return this.reportsRenameFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the `` parameter to check prepared timestamp
     * @param {String} id template id
     * @param {Object} opts Optional parameters
     * @param {module:models/PreviewReportVM} opts.previewReportVM Model with parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    reportsStaticPreviewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['previewReportVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsStaticPreview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/StaticPreview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the `` parameter to check prepared timestamp
     * @param {String} id template id
     * @param {Object} opts Optional parameters
     * @param {module:models/PreviewReportVM} opts.previewReportVM Model with parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    reportsStaticPreview(id, opts) {
      return this.reportsStaticPreviewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a files's icon
     * User with Update Icon permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileIconVM} opts.fileIconVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsUpdateIconWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileIconVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsUpdateIcon");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/Icon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a files's icon
     * User with Update Icon permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileIconVM} opts.fileIconVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsUpdateIcon(id, opts) {
      return this.reportsUpdateIconWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reportsUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateFilePermissionsVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reportsUpdatePermissions(id, opts) {
      return this.reportsUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileTagsUpdateVM} opts.fileTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsUpdateTagsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileTagsUpdateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsUpdateTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/File/{id}/UpdateTags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileTagsUpdateVM} opts.fileTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsUpdateTags(id, opts) {
      return this.reportsUpdateTagsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
     * User with Create Entity permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportCreateVM} opts.reportCreateVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsUploadFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['reportCreateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsUploadFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Reports/Folder/{id}/File', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
     * User with Create Entity permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportCreateVM} opts.reportCreateVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsUploadFile(id, opts) {
      return this.reportsUploadFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Alternative api for upload a file to the specified folder!
     * User with Create Entity permission can access this method.
     * @param {String} id Identifier of folder
     * @param {File} fileContent 
     * @param {Object} opts Optional parameters
     * @param {String} opts.templateId 
     * @param {Array.<String>} opts.tags 
     * @param {File} opts.icon 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    reportsUploadFileV2WithHttpInfo(id, fileContent, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportsUploadFileV2");
      }
      // verify the required parameter 'fileContent' is set
      if (fileContent === undefined || fileContent === null) {
        throw new Error("Missing the required parameter 'fileContent' when calling reportsUploadFileV2");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'TemplateId': opts['templateId'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Icon': opts['icon'],
        'FileContent': fileContent
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ReportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v2/Reports/Folder/{id}/File', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Alternative api for upload a file to the specified folder!
     * User with Create Entity permission can access this method.
     * @param {String} id Identifier of folder
     * @param {File} fileContent 
     * @param {Object} opts Optional parameters
     * @param {String} opts.templateId 
     * @param {Array.<String>} opts.tags 
     * @param {File} opts.icon 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    reportsUploadFileV2(id, fileContent, opts) {
      return this.reportsUploadFileV2WithHttpInfo(id, fileContent, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
