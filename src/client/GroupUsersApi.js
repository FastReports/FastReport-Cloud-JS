/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupUsersVM from '../models/GroupUsersVM';
import ProblemDetails from '../models/ProblemDetails';

/**
* GroupUsers service.
* @module client/GroupUsersApi
* @version v1
*/
export default class GroupUsersApi {

    /**
    * Constructs a new GroupUsersApi. 
    * @alias module:client/GroupUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add user to the group by identifier
     * @param {String} id Identifier of group
     * @param {String} userId Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    groupUsersAddUserToGroupWithHttpInfo(id, userId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupUsersAddUserToGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling groupUsersAddUserToGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/manage/v1/Groups/{id}/Users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add user to the group by identifier
     * @param {String} id Identifier of group
     * @param {String} userId Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    groupUsersAddUserToGroup(id, userId) {
      return this.groupUsersAddUserToGroupWithHttpInfo(id, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns users in the group by identifier
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many to skip (default to 0)
     * @param {Number} opts.take how many to take (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupUsersVM} and HTTP response
     */
    groupUsersGetUsersInGroupWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupUsersGetUsersInGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupUsersVM;
      return this.apiClient.callApi(
        '/api/manage/v1/Groups/{id}/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns users in the group by identifier
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many to skip (default to 0)
     * @param {Number} opts.take how many to take (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupUsersVM}
     */
    groupUsersGetUsersInGroup(id, opts) {
      return this.groupUsersGetUsersInGroupWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Leave from the group
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    groupUsersLeaveFromGroupWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupUsersLeaveFromGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/manage/v1/Groups/{id}/leave', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Leave from the group
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    groupUsersLeaveFromGroup(id) {
      return this.groupUsersLeaveFromGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user from the group by identifier
     * @param {String} id Identifier of group
     * @param {String} userId Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    groupUsersRemoveFromGroupWithHttpInfo(id, userId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupUsersRemoveFromGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling groupUsersRemoveFromGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/manage/v1/Groups/{id}/Users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove user from the group by identifier
     * @param {String} id Identifier of group
     * @param {String} userId Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    groupUsersRemoveFromGroup(id, userId) {
      return this.groupUsersRemoveFromGroupWithHttpInfo(id, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
