/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../models/ProblemDetails';

/**
* Download service.
* @module client/DownloadApi
* @version v1
*/
export default class DownloadApi {

    /**
    * Constructs a new DownloadApi. 
    * @alias module:client/DownloadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns a export file with specified id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.preview  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetExportWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'preview': opts['preview']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/octet-stream', 'application/pdf'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/e/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a export file with specified id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.preview  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetExport(id, opts) {
      return this.downloadGetExportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns export's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetExportThumbnailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetExportThumbnail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'image/png', 'image/jpeg'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/e/{id}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns export's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetExportThumbnail(id) {
      return this.downloadGetExportThumbnailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a zip archive with selected ids
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetExportsWithHttpInfo(archiveName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling downloadGetExports");
      }

      let pathParams = {
        'archiveName': archiveName
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/zip'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/es/{archiveName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a zip archive with selected ids
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetExports(archiveName, opts) {
      return this.downloadGetExportsWithHttpInfo(archiveName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a prepared file with specified id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetReportWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/octet-stream'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/r/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a prepared file with specified id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetReport(id) {
      return this.downloadGetReportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns report's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetReportThumbnailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetReportThumbnail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'image/png', 'image/jpeg'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/r/{id}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns report's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetReportThumbnail(id) {
      return this.downloadGetReportThumbnailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a zip archive with selected files
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetReportsWithHttpInfo(archiveName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling downloadGetReports");
      }

      let pathParams = {
        'archiveName': archiveName
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/zip'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/rs/{archiveName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a zip archive with selected files
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetReports(archiveName, opts) {
      return this.downloadGetReportsWithHttpInfo(archiveName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a Template file with specified id
     * @param {String} id template id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetTemplateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/octet-stream'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/t/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a Template file with specified id
     * @param {String} id template id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetTemplate(id) {
      return this.downloadGetTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns template's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetTemplateThumbnailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadGetTemplateThumbnail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'image/png', 'image/jpeg'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/t/{id}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns template's thumbnail
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetTemplateThumbnail(id) {
      return this.downloadGetTemplateThumbnailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a zip archive with selected files
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGetTemplatesWithHttpInfo(archiveName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling downloadGetTemplates");
      }

      let pathParams = {
        'archiveName': archiveName
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'application/zip'];
      let returnType = File;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/download/ts/{archiveName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a zip archive with selected files
     * @param {String} archiveName name of the created archive
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids ids separated with a ',' sign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGetTemplates(archiveName, opts) {
      return this.downloadGetTemplatesWithHttpInfo(archiveName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
