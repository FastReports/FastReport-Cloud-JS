/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminReportFolderCreateVM from '../models/AdminReportFolderCreateVM';
import FilePermissionsVM from '../models/FilePermissionsVM';
import FileUpdateVM from '../models/FileUpdateVM';
import FileVM from '../models/FileVM';
import FilesVM from '../models/FilesVM';
import ProblemDetails from '../models/ProblemDetails';
import ReportCreateAdminVM from '../models/ReportCreateAdminVM';
import ReportVM from '../models/ReportVM';
import ReportsVM from '../models/ReportsVM';
import UpdateFilePermissionsVM from '../models/UpdateFilePermissionsVM';

/**
* AdminReports service.
* @module client/AdminReportsApi
* @version v1
*/
export default class AdminReportsApi {

    /**
    * Constructs a new AdminReportsApi. 
    * @alias module:client/AdminReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete specified folder
     * User with Delete permission can access the method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.recursive delete folder's content (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminReportFoldersDeleteFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportFoldersDeleteFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified folder
     * User with Delete permission can access the method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.recursive delete folder's content (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminReportFoldersDeleteFolder(id, opts) {
      return this.adminReportFoldersDeleteFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a folder by id
     * @param {String} id Identifier of a folder
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    adminReportFoldersGetFolderWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportFoldersGetFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FileVM;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a folder by id
     * @param {String} id Identifier of a folder
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    adminReportFoldersGetFolder(id) {
      return this.adminReportFoldersGetFolderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of folders
     * If no folders, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Allows to filter by subscriptions ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    adminReportFoldersGetFoldersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FilesVM;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of folders
     * If no folders, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Allows to filter by subscriptions ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    adminReportFoldersGetFolders(opts) {
      return this.adminReportFoldersGetFoldersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folder permissions
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    adminReportFoldersGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportFoldersGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FilePermissionsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folder permissions
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    adminReportFoldersGetPermissions(id) {
      return this.adminReportFoldersGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a folder
     * User with a Create File permisison can access this method.
     * @param {Object} opts Optional parameters
     * @param {module:models/AdminReportFolderCreateVM} opts.folderVm folder create vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    adminReportFoldersPostFolderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['folderVm'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FileVM;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a folder
     * User with a Create File permisison can access this method.
     * @param {Object} opts Optional parameters
     * @param {module:models/AdminReportFolderCreateVM} opts.folderVm folder create vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    adminReportFoldersPostFolder(opts) {
      return this.adminReportFoldersPostFolderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a folder
     * User with Create File permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/FileUpdateVM} opts.folderVM folder's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    adminReportFoldersUpdateFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportFoldersUpdateFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FileVM;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a folder
     * User with Create File permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/FileUpdateVM} opts.folderVM folder's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    adminReportFoldersUpdateFolder(id, opts) {
      return this.adminReportFoldersUpdateFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke permission
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminReportFoldersUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['newPermissions'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportFoldersUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/ReportFolders/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke permission
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminReportFoldersUpdatePermissions(id, opts) {
      return this.adminReportFoldersUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminReportsDeleteFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportsDeleteFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminReportsDeleteFile(id) {
      return this.adminReportsDeleteFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a file by id
     * @param {String} id Identifier of file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    adminReportsGetFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportsGetFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ReportVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a file by id
     * @param {String} id Identifier of file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    adminReportsGetFile(id) {
      return this.adminReportsGetFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of files
     * If no files, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Subscription Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportsVM} and HTTP response
     */
    adminReportsGetFilesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ReportsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of files
     * If no files, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Subscription Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportsVM}
     */
    adminReportsGetFiles(opts) {
      return this.adminReportsGetFilesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all file permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    adminReportsGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportsGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FilePermissionsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all file permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    adminReportsGetPermissions(id) {
      return this.adminReportsGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a file
     * User with Create Entity permission can access this method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/FileUpdateVM} opts.fileVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    adminReportsUpdateFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportsUpdateFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ReportVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a file
     * User with Create Entity permission can access this method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/FileUpdateVM} opts.fileVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    adminReportsUpdateFile(id, opts) {
      return this.adminReportsUpdateFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions to file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminReportsUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['newPermissions'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminReportsUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions to file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminReportsUpdatePermissions(id, opts) {
      return this.adminReportsUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file to the specified folder
     * User with Create Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportCreateAdminVM} opts.fileVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReportVM} and HTTP response
     */
    adminReportsUploadFileWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['fileVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ReportVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a file to the specified folder
     * User with Create Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {module:models/ReportCreateAdminVM} opts.fileVM file's view model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReportVM}
     */
    adminReportsUploadFile(opts) {
      return this.adminReportsUploadFileWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
