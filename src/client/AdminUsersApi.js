/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../models/ProblemDetails';
import RegisterUserVM from '../models/RegisterUserVM';
import UpdateUserVM from '../models/UpdateUserVM';
import UserVM from '../models/UserVM';
import UsersVM from '../models/UsersVM';

/**
* AdminUsers service.
* @module client/AdminUsersApi
* @version v1
*/
export default class AdminUsersApi {

    /**
    * Constructs a new AdminUsersApi. 
    * @alias module:client/AdminUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a user from cloud database by id
     * @param {String} id Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminUsersDeleteUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminUsersDeleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/Users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user from cloud database by id
     * @param {String} id Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminUsersDeleteUser(id) {
      return this.adminUsersDeleteUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a key-value pair of new users count per month for a specified time span: (month, number of new users)
     * If no users, then the endpoint will return empty dic
     * @param {Date} from A starting date for stats calculation
     * @param {Date} to An ending date for stats calculation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Number}>} and HTTP response
     */
    adminUsersGetNewUsersPerMonthWithHttpInfo(from, to) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling adminUsersGetNewUsersPerMonth");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling adminUsersGetNewUsersPerMonth");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/api/admin/v1/Users/stat/new/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a key-value pair of new users count per month for a specified time span: (month, number of new users)
     * If no users, then the endpoint will return empty dic
     * @param {Date} from A starting date for stats calculation
     * @param {Date} to An ending date for stats calculation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Number}>}
     */
    adminUsersGetNewUsersPerMonth(from, to) {
      return this.adminUsersGetNewUsersPerMonthWithHttpInfo(from, to)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a user view model by id
     * @param {String} id Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UserVM} and HTTP response
     */
    adminUsersGetUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminUsersGetUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a user view model by id
     * @param {String} id Identifier of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UserVM}
     */
    adminUsersGetUser(id) {
      return this.adminUsersGetUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of users
     * If no users, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UsersVM} and HTTP response
     */
    adminUsersGetUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UsersVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of users
     * If no users, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UsersVM}
     */
    adminUsersGetUsers(opts) {
      return this.adminUsersGetUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register a new user in the cloud with specified id, returns a new model
     * @param {Object} opts Optional parameters
     * @param {module:models/RegisterUserVM} opts.viewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UserVM} and HTTP response
     */
    adminUsersRegisterUserWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['viewModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register a new user in the cloud with specified id, returns a new model
     * @param {Object} opts Optional parameters
     * @param {module:models/RegisterUserVM} opts.viewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UserVM}
     */
    adminUsersRegisterUser(opts) {
      return this.adminUsersRegisterUserWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an user by id
     * @param {String} id Identifier of the user
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateUserVM} opts.viewModel update VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UserVM} and HTTP response
     */
    adminUsersUpdateUserWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['viewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminUsersUpdateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an user by id
     * @param {String} id Identifier of the user
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateUserVM} opts.viewModel update VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UserVM}
     */
    adminUsersUpdateUser(id, opts) {
      return this.adminUsersUpdateUserWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
