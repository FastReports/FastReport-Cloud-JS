/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisResultsVM from '../models/AnalysisResultsVM';
import ProblemDetails from '../models/ProblemDetails';

/**
* AdminSubscriptionAnalytics service.
* @module client/AdminSubscriptionAnalyticsApi
* @version v1
*/
export default class AdminSubscriptionAnalyticsApi {

    /**
    * Constructs a new AdminSubscriptionAnalyticsApi. 
    * @alias module:client/AdminSubscriptionAnalyticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * This will check if there are any files, related to subscription that available for anonymous users
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsCheckAnonPermissionsWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adminSubscriptionAnalyticsCheckAnonPermissions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/{subscriptionId}/AnonCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any files, related to subscription that available for anonymous users
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsCheckAnonPermissions(subscriptionId) {
      return this.adminSubscriptionAnalyticsCheckAnonPermissionsWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This will check if there are any files, related to subscription that not available for subscription users
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsCheckOtherPermissionsWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adminSubscriptionAnalyticsCheckOtherPermissions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/{subscriptionId}/OtherCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any files, related to subscription that not available for subscription users
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsCheckOtherPermissions(subscriptionId) {
      return this.adminSubscriptionAnalyticsCheckOtherPermissionsWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This will check if there are any deleted subscriptions in users sub lists
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsGetDeadSubsInUsersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/DeadSubsInUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any deleted subscriptions in users sub lists
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsGetDeadSubsInUsers() {
      return this.adminSubscriptionAnalyticsGetDeadSubsInUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This will check if there are any subscriptions without users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsGetEmptySubsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/EmptySubs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any subscriptions without users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsGetEmptySubs() {
      return this.adminSubscriptionAnalyticsGetEmptySubsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This will check if there are any files in gridFS, which not related to any file model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsGetLostFileChunksWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/LostFileChunks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any files in gridFS, which not related to any file model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsGetLostFileChunks() {
      return this.adminSubscriptionAnalyticsGetLostFileChunksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This will check if there are any files, that not related to any existing subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AnalysisResultsVM} and HTTP response
     */
    adminSubscriptionAnalyticsGetUnrelatedDocumentsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AnalysisResultsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Analytics/Subscriptions/UnrelatedDocuments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This will check if there are any files, that not related to any existing subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AnalysisResultsVM}
     */
    adminSubscriptionAnalyticsGetUnrelatedDocuments() {
      return this.adminSubscriptionAnalyticsGetUnrelatedDocumentsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
