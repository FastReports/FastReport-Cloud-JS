/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDataSourceAdminVM from '../models/CreateDataSourceAdminVM';
import DataSourcePermissionsVM from '../models/DataSourcePermissionsVM';
import DataSourceVM from '../models/DataSourceVM';
import DataSourcesVM from '../models/DataSourcesVM';
import ProblemDetails from '../models/ProblemDetails';
import UpdateDataSourcePermissionsVM from '../models/UpdateDataSourcePermissionsVM';
import UpdateDataSourceVM from '../models/UpdateDataSourceVM';

/**
* AdminDataSource service.
* @module client/AdminDataSourceApi
* @version v1
*/
export default class AdminDataSourceApi {

    /**
    * Constructs a new AdminDataSourceApi. 
    * @alias module:client/AdminDataSourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create new data source
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateDataSourceAdminVM} opts.createVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DataSourceVM} and HTTP response
     */
    adminDataSourceCreateDataSourceWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DataSourceVM;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new data source
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateDataSourceAdminVM} opts.createVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DataSourceVM}
     */
    adminDataSourceCreateDataSource(opts) {
      return this.adminDataSourceCreateDataSourceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete datasource by id
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminDataSourceDeleteDataSourceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDataSourceDeleteDataSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete datasource by id
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminDataSourceDeleteDataSource(id) {
      return this.adminDataSourceDeleteDataSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This should connect to a database and set data structure
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminDataSourceFetchDataWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDataSourceFetchData");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{id}/fetch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This should connect to a database and set data structure
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminDataSourceFetchData(id) {
      return this.adminDataSourceFetchDataWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get datasource by id
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DataSourceVM} and HTTP response
     */
    adminDataSourceGetDataSourceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDataSourceGetDataSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DataSourceVM;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get datasource by id
     * @param {String} id datasource's id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DataSourceVM}
     */
    adminDataSourceGetDataSource(id) {
      return this.adminDataSourceGetDataSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of datasources from database
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many datasources will be skiped
     * @param {Number} opts.take how many datasources will be taken
     * @param {String} opts.subscriptionId Allow filters by subscription ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DataSourcesVM} and HTTP response
     */
    adminDataSourceGetDataSourcesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DataSourcesVM;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of datasources from database
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many datasources will be skiped
     * @param {Number} opts.take how many datasources will be taken
     * @param {String} opts.subscriptionId Allow filters by subscription ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DataSourcesVM}
     */
    adminDataSourceGetDataSources(opts) {
      return this.adminDataSourceGetDataSourcesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Data source permissions
     * @param {String} id data source id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DataSourcePermissionsVM} and HTTP response
     */
    adminDataSourceGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDataSourceGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DataSourcePermissionsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Data source permissions
     * @param {String} id data source id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DataSourcePermissionsVM}
     */
    adminDataSourceGetPermissions(id) {
      return this.adminDataSourceGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update datasource with update VM
     * @param {String} id datasource's id
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateDataSourceVM} opts.updateVM update VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DataSourceVM} and HTTP response
     */
    adminDataSourceUpdateDataSourceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminDataSourceUpdateDataSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DataSourceVM;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update datasource with update VM
     * @param {String} id datasource's id
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateDataSourceVM} opts.updateVM update VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DataSourceVM}
     */
    adminDataSourceUpdateDataSource(id, opts) {
      return this.adminDataSourceUpdateDataSourceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions to datasource
     * @param {String} dataSourceId 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateDataSourcePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminDataSourceUpdatePermissionsWithHttpInfo(dataSourceId, opts) {
      opts = opts || {};
      let postBody = opts['newPermissions'];
      // verify the required parameter 'dataSourceId' is set
      if (dataSourceId === undefined || dataSourceId === null) {
        throw new Error("Missing the required parameter 'dataSourceId' when calling adminDataSourceUpdatePermissions");
      }

      let pathParams = {
        'dataSourceId': dataSourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/DataSource/{dataSourceId}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions to datasource
     * @param {String} dataSourceId 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateDataSourcePermissionsVM} opts.newPermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminDataSourceUpdatePermissions(dataSourceId, opts) {
      return this.adminDataSourceUpdatePermissionsWithHttpInfo(dataSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
