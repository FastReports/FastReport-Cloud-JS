/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditActionsVM from '../models/AuditActionsVM';
import ClearNotificationsVM from '../models/ClearNotificationsVM';
import ProblemDetails from '../models/ProblemDetails';

/**
* UserNotifications service.
* @module client/UserNotificationsApi
* @version v1
*/
export default class UserNotificationsApi {

    /**
    * Constructs a new UserNotificationsApi. 
    * @alias module:client/UserNotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Use this endpoint to \"clear\" your notifications
     * @param {Object} opts Optional parameters
     * @param {module:models/ClearNotificationsVM} opts.clearNotificationsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    userNotificationsClearNotificationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['clearNotificationsVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/notifications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Use this endpoint to \"clear\" your notifications
     * @param {Object} opts Optional parameters
     * @param {module:models/ClearNotificationsVM} opts.clearNotificationsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    userNotificationsClearNotifications(opts) {
      return this.userNotificationsClearNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Use this endpoint to recieve notifications
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 5)
     * @param {String} opts.subscriptionId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AuditActionsVM} and HTTP response
     */
    userNotificationsGetNotificationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditActionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/manage/v1/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Use this endpoint to recieve notifications
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 5)
     * @param {String} opts.subscriptionId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AuditActionsVM}
     */
    userNotificationsGetNotifications(opts) {
      return this.userNotificationsGetNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
