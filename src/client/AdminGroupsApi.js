/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGroupAdminVM from '../models/CreateGroupAdminVM';
import GroupPermissionsVM from '../models/GroupPermissionsVM';
import GroupVM from '../models/GroupVM';
import GroupsVM from '../models/GroupsVM';
import ProblemDetails from '../models/ProblemDetails';
import UpdateGroupPermissionsVM from '../models/UpdateGroupPermissionsVM';
import UpdateGroupVM from '../models/UpdateGroupVM';

/**
* AdminGroups service.
* @module client/AdminGroupsApi
* @version v1
*/
export default class AdminGroupsApi {

    /**
    * Constructs a new AdminGroupsApi. 
    * @alias module:client/AdminGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new group, returns a new model
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateGroupAdminVM} opts.viewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupVM} and HTTP response
     */
    adminGroupsCreateGroupWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['viewModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new group, returns a new model
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateGroupAdminVM} opts.viewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupVM}
     */
    adminGroupsCreateGroup(opts) {
      return this.adminGroupsCreateGroupWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a group by id
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminGroupsDeleteGroupWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGroupsDeleteGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a group by id
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminGroupsDeleteGroup(id) {
      return this.adminGroupsDeleteGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a group by id
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupVM} and HTTP response
     */
    adminGroupsGetGroupWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGroupsGetGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a group by id
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupVM}
     */
    adminGroupsGetGroup(id) {
      return this.adminGroupsGetGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of groups
     * If no groups, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Allow to filter by subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupsVM} and HTTP response
     */
    adminGroupsGetGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of groups
     * If no groups, then the endpoint will return empty list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Variable for pagination, defautl value is 0 (default to 0)
     * @param {Number} opts.take Variable for pagination, default value is 10 (default to 10)
     * @param {String} opts.subscriptionId Allow to filter by subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupsVM}
     */
    adminGroupsGetGroups(opts) {
      return this.adminGroupsGetGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets group permissions by identifier
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupPermissionsVM} and HTTP response
     */
    adminGroupsGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGroupsGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupPermissionsVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets group permissions by identifier
     * @param {String} id Identifier of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupPermissionsVM}
     */
    adminGroupsGetPermissions(id) {
      return this.adminGroupsGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a group by id
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateGroupVM} opts.viewModel update vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/GroupVM} and HTTP response
     */
    adminGroupsUpdateGroupWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['viewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGroupsUpdateGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupVM;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a group by id
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateGroupVM} opts.viewModel update vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/GroupVM}
     */
    adminGroupsUpdateGroup(id, opts) {
      return this.adminGroupsUpdateGroupWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions in user group by identifier
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateGroupPermissionsVM} opts.newPermissions Model with new permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    adminGroupsUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['newPermissions'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminGroupsUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/admin/v1/Groups/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions in user group by identifier
     * @param {String} id Identifier of group
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateGroupPermissionsVM} opts.newPermissions Model with new permissions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    adminGroupsUpdatePermissions(id, opts) {
      return this.adminGroupsUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
