/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactVM from '../models/ContactVM';
import ContactsVM from '../models/ContactsVM';
import CreateContactVM from '../models/CreateContactVM';
import ProblemDetails from '../models/ProblemDetails';
import UpdateContactVM from '../models/UpdateContactVM';

/**
* Contacts service.
* @module client/ContactsApi
* @version v1
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:client/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates new contact
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateContactVM} opts.createContactVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactVM} and HTTP response
     */
    contactsCreateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createContactVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ContactVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates new contact
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateContactVM} opts.createContactVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactVM}
     */
    contactsCreate(opts) {
      return this.contactsCreateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes contact by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    contactsDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes contact by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    contactsDelete(id) {
      return this.contactsDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns contact group by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactVM} and HTTP response
     */
    contactsGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns contact group by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactVM}
     */
    contactsGet(id) {
      return this.contactsGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns contacts by group id
     * @param {String} groupId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactsVM} and HTTP response
     */
    contactsGetByGroupWithHttpInfo(groupId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling contactsGetByGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/group/{groupId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns contacts by group id
     * @param {String} groupId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactsVM}
     */
    contactsGetByGroup(groupId, opts) {
      return this.contactsGetByGroupWithHttpInfo(groupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Allows to search for contacts
     * @param {String} subscriptionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @param {String} opts.searchPattern 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactsVM} and HTTP response
     */
    contactsGetListWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contactsGetList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'searchPattern': opts['searchPattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/subscription/{subscriptionId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allows to search for contacts
     * @param {String} subscriptionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @param {String} opts.searchPattern 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactsVM}
     */
    contactsGetList(subscriptionId, opts) {
      return this.contactsGetListWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates contact by id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateContactVM} opts.updateContactVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactVM} and HTTP response
     */
    contactsUpdateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateContactVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ContactVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/Contacts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates contact by id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateContactVM} opts.updateContactVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactVM}
     */
    contactsUpdate(id, opts) {
      return this.contactsUpdateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
