/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactGroupVM from '../models/ContactGroupVM';
import ContactGroupsVM from '../models/ContactGroupsVM';
import CreateContactGroupVM from '../models/CreateContactGroupVM';
import ProblemDetails from '../models/ProblemDetails';
import UpdateContactGroupVM from '../models/UpdateContactGroupVM';

/**
* ContactGroups service.
* @module client/ContactGroupsApi
* @version v1
*/
export default class ContactGroupsApi {

    /**
    * Constructs a new ContactGroupsApi. 
    * @alias module:client/ContactGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates contact group
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateContactGroupVM} opts.createContactGroupVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactGroupVM} and HTTP response
     */
    contactGroupsCreateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createContactGroupVM'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ContactGroupVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/ContactGroups/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates contact group
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateContactGroupVM} opts.createContactGroupVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactGroupVM}
     */
    contactGroupsCreate(opts) {
      return this.contactGroupsCreateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes contact by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    contactGroupsDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/ContactGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes contact by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    contactGroupsDelete(id) {
      return this.contactGroupsDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns contact group by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactGroupVM} and HTTP response
     */
    contactGroupsGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactGroupsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactGroupVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/ContactGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns contact group by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactGroupVM}
     */
    contactGroupsGet(id) {
      return this.contactGroupsGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns contact groups by subscriptionId
     * @param {String} subscriptionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactGroupsVM} and HTTP response
     */
    contactGroupsGetListWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contactGroupsGetList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactGroupsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/ContactGroups/subscription/{subscriptionId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns contact groups by subscriptionId
     * @param {String} subscriptionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactGroupsVM}
     */
    contactGroupsGetList(subscriptionId, opts) {
      return this.contactGroupsGetListWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates contact group by id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateContactGroupVM} opts.updateContactGroupVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContactGroupVM} and HTTP response
     */
    contactGroupsUpdateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateContactGroupVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ContactGroupVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/ContactGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates contact group by id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateContactGroupVM} opts.updateContactGroupVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContactGroupVM}
     */
    contactGroupsUpdate(id, opts) {
      return this.contactGroupsUpdateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
