/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditActionsVM from '../models/AuditActionsVM';
import BreadcrumbsVM from '../models/BreadcrumbsVM';
import CountVM from '../models/CountVM';
import CreateFileShareVM from '../models/CreateFileShareVM';
import ExportFolderCreateVM from '../models/ExportFolderCreateVM';
import ExportVM from '../models/ExportVM';
import ExportsVM from '../models/ExportsVM';
import FileIconVM from '../models/FileIconVM';
import FilePermissionCRUDVM from '../models/FilePermissionCRUDVM';
import FilePermissionsVM from '../models/FilePermissionsVM';
import FileRenameVM from '../models/FileRenameVM';
import FileSharingKeysVM from '../models/FileSharingKeysVM';
import FileSorting from '../models/FileSorting';
import FileTagsUpdateVM from '../models/FileTagsUpdateVM';
import FileVM from '../models/FileVM';
import FilesVM from '../models/FilesVM';
import FolderIconVM from '../models/FolderIconVM';
import FolderRenameVM from '../models/FolderRenameVM';
import FolderSizeVM from '../models/FolderSizeVM';
import FolderTagsUpdateVM from '../models/FolderTagsUpdateVM';
import ProblemDetails from '../models/ProblemDetails';
import SelectedFilesVM from '../models/SelectedFilesVM';
import UpdateFilePermissionsVM from '../models/UpdateFilePermissionsVM';

/**
* Exports service.
* @module client/ExportsApi
* @version v1
*/
export default class ExportsApi {

    /**
    * Constructs a new ExportsApi. 
    * @alias module:client/ExportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileClearRecycleBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/ClearRecycleBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileClearRecycleBin(subscriptionId) {
      return this.exportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileCopyFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/CopyFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileCopyFiles(subscriptionId, opts) {
      return this.exportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    exportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileCountRecycleBinFoldersAndFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/CountRecycleBinFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    exportFolderAndFileCountRecycleBinFoldersAndFiles(subscriptionId, opts) {
      return this.exportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileDeleteFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/DeleteFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileDeleteFiles(subscriptionId, opts) {
      return this.exportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern string, that must be incuded in file or folder name to be counted <br />              (leave undefined to count all files and folders)
     * @param {Boolean} opts.useRegex set this to true if you want to use regular expression to search (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    exportFolderAndFileGetCountWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFolderAndFileGetCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/CountFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchPattern string, that must be incuded in file or folder name to be counted <br />              (leave undefined to count all files and folders)
     * @param {Boolean} opts.useRegex set this to true if you want to use regular expression to search (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    exportFolderAndFileGetCount(id, opts) {
      return this.exportFolderAndFileGetCountWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    exportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFolderAndFileGetFoldersAndFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/ListFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    exportFolderAndFileGetFoldersAndFiles(id, opts) {
      return this.exportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    exportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileGetRecycleBinFoldersAndFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/ListRecycleBinFolderAndFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param {String} subscriptionId subscription id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of folder and files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of folder and files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy indicates a field to sort by
     * @param {Boolean} opts.desc indicates if sorting is descending (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    exportFolderAndFileGetRecycleBinFoldersAndFiles(subscriptionId, opts) {
      return this.exportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileMoveFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/MoveFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileMoveFiles(subscriptionId, opts) {
      return this.exportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileMoveFilesToBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/ToBin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileMoveFilesToBin(subscriptionId, opts) {
      return this.exportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileRecoverAllFromRecycleBin");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/RecoverRecycleBin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param {String} subscriptionId subscription id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileRecoverAllFromRecycleBin(subscriptionId) {
      return this.exportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, opts) {
      opts = opts || {};
      let postBody = opts['selectedFilesVM'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportFolderAndFileRecoverFiles");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{subscriptionId}/RecoverFiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param {String} subscriptionId id of current subscription
     * @param {Object} opts Optional parameters
     * @param {module:models/SelectedFilesVM} opts.selectedFilesVM VM with files' ids and params of their destination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFolderAndFileRecoverFiles(subscriptionId, opts) {
      return this.exportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder, calculate it's size
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FolderSizeVM} and HTTP response
     */
    exportFoldersCalculateFolderSizeWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersCalculateFolderSize");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FolderSizeVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder, calculate it's size
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FolderSizeVM}
     */
    exportFoldersCalculateFolderSize(id) {
      return this.exportFoldersCalculateFolderSizeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersCopyFolderWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersCopyFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling exportFoldersCopyFolder");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Copy/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersCopyFolder(id, folderId) {
      return this.exportFoldersCopyFolderWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFoldersDeleteFolderWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersDeleteFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFoldersDeleteFolder(id) {
      return this.exportFoldersDeleteFolderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BreadcrumbsVM} and HTTP response
     */
    exportFoldersGetBreadcrumbsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersGetBreadcrumbs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BreadcrumbsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Breadcrumbs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BreadcrumbsVM}
     */
    exportFoldersGetBreadcrumbs(id) {
      return this.exportFoldersGetBreadcrumbsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersGetFolderWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersGetFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersGetFolder(id) {
      return this.exportFoldersGetFolderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilesVM} and HTTP response
     */
    exportFoldersGetFoldersWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersGetFolders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'searchPattern': opts['searchPattern'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/ListFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {String} opts.searchPattern  (default to '')
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilesVM}
     */
    exportFoldersGetFolders(id, opts) {
      return this.exportFoldersGetFoldersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    exportFoldersGetFoldersCountWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersGetFoldersCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/CountFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    exportFoldersGetFoldersCount(id) {
      return this.exportFoldersGetFoldersCountWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user's permissions for a folder by id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionCRUDVM} and HTTP response
     */
    exportFoldersGetMyPermissionsWithHttpInfo(folderId) {
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling exportFoldersGetMyPermissions");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionCRUDVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{folderId}/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user's permissions for a folder by id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionCRUDVM}
     */
    exportFoldersGetMyPermissions(folderId) {
      return this.exportFoldersGetMyPermissionsWithHttpInfo(folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name folder name
     * @param {String} opts.subscriptionId subscriptionId
     * @param {String} opts.parentId parent folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersGetOrCreateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'subscriptionId': opts['subscriptionId'],
        'parentId': opts['parentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/getOrCreate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name folder name
     * @param {String} opts.subscriptionId subscriptionId
     * @param {String} opts.parentId parent folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersGetOrCreate(opts) {
      return this.exportFoldersGetOrCreateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all folder permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    exportFoldersGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all folder permissions
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    exportFoldersGetPermissions(id) {
      return this.exportFoldersGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user's root folder (without parents)
     * > Breakchange. Now user model doesn't contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscriptionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersGetRootFolderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subscriptionId': opts['subscriptionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user's root folder (without parents)
     * > Breakchange. Now user model doesn't contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.subscriptionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersGetRootFolder(opts) {
      return this.exportFoldersGetRootFolderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersMoveFolderWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersMoveFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling exportFoldersMoveFolder");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Move/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id moving folder id
     * @param {String} folderId destination folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersMoveFolder(id, folderId) {
      return this.exportFoldersMoveFolderWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFoldersMoveFolderToBinWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersMoveFolderToBin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/ToBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFoldersMoveFolderToBin(id) {
      return this.exportFoldersMoveFolderToBinWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param {String} id Identifier of parent folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportFolderCreateVM} opts.exportFolderCreateVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersPostFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['exportFolderCreateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersPostFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Folder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param {String} id Identifier of parent folder id
     * @param {Object} opts Optional parameters
     * @param {module:models/ExportFolderCreateVM} opts.exportFolderCreateVM create VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersPostFolder(id, opts) {
      return this.exportFoldersPostFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFoldersRecoverFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersRecoverFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recoveryPath': opts['recoveryPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFoldersRecoverFolder(id, opts) {
      return this.exportFoldersRecoverFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderRenameVM} opts.folderRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersRenameFolderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderRenameVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersRenameFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderRenameVM} opts.folderRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersRenameFolder(id, opts) {
      return this.exportFoldersRenameFolderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a folder's icon
     * User with a Update Icon permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderIconVM} opts.folderIconVM Update icon model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersUpdateIconWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderIconVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersUpdateIcon");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/Icon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a folder's icon
     * User with a Update Icon permission can access this method.
     * @param {String} id Identifier of folder
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderIconVM} opts.folderIconVM Update icon model
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersUpdateIcon(id, opts) {
      return this.exportFoldersUpdateIconWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportFoldersUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateFilePermissionsVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportFoldersUpdatePermissions(id, opts) {
      return this.exportFoldersUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderTagsUpdateVM} opts.folderTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileVM} and HTTP response
     */
    exportFoldersUpdateTagsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['folderTagsUpdateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportFoldersUpdateTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/UpdateTags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FolderTagsUpdateVM} opts.folderTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileVM}
     */
    exportFoldersUpdateTags(id, opts) {
      return this.exportFoldersUpdateTagsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy file to a specified folder
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsCopyFileWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsCopyFile");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling exportsCopyFile");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/Copy/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy file to a specified folder
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsCopyFile(id, folderId) {
      return this.exportsCopyFileWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateFileShareVM} opts.createFileShareVM parameters for sharing key creation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileSharingKeysVM} and HTTP response
     */
    exportsCreateSharingKeyWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['createFileShareVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsCreateSharingKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = FileSharingKeysVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/sharingKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {module:models/CreateFileShareVM} opts.createFileShareVM parameters for sharing key creation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileSharingKeysVM}
     */
    exportsCreateSharingKey(id, opts) {
      return this.exportsCreateSharingKeyWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportsDeleteFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsDeleteFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportsDeleteFile(id) {
      return this.exportsDeleteFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * @param {String} id file id
     * @param {String} key key to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportsDeleteSharingKeyWithHttpInfo(id, key) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsDeleteSharingKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling exportsDeleteSharingKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/sharingKey', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * @param {String} id file id
     * @param {String} key key to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportsDeleteSharingKey(id, key) {
      return this.exportsDeleteSharingKeyWithHttpInfo(id, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exports by specified task id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportsVM} and HTTP response
     */
    exportsGetByTaskIdWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling exportsGetByTaskId");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/Task/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get exports by specified task id
     * @param {String} taskId task id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportsVM}
     */
    exportsGetByTaskId(taskId) {
      return this.exportsGetByTaskIdWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get export by specified task message id
     * @param {String} taskMessageId task message id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsGetByTaskMessageIdWithHttpInfo(taskMessageId) {
      let postBody = null;
      // verify the required parameter 'taskMessageId' is set
      if (taskMessageId === undefined || taskMessageId === null) {
        throw new Error("Missing the required parameter 'taskMessageId' when calling exportsGetByTaskMessageId");
      }

      let pathParams = {
        'taskMessageId': taskMessageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/TaskMessage/{taskMessageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get export by specified task message id
     * @param {String} taskMessageId task message id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsGetByTaskMessageId(taskMessageId) {
      return this.exportsGetByTaskMessageIdWithHttpInfo(taskMessageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get export by specified id
     * @param {String} id id of export
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsGetFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get export by specified id
     * @param {String} id id of export
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsGetFile(id) {
      return this.exportsGetFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of actions, performed on this file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AuditActionsVM} and HTTP response
     */
    exportsGetFileHistoryWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetFileHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditActionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns list of actions, performed on this file
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AuditActionsVM}
     */
    exportsGetFileHistory(id, opts) {
      return this.exportsGetFileHistoryWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CountVM} and HTTP response
     */
    exportsGetFilesCountWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetFilesCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/CountFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param {String} id folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CountVM}
     */
    exportsGetFilesCount(id) {
      return this.exportsGetFilesCountWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all files from specified folder. <br />  User with Get Entity permission can access this method. <br />  The method will returns minimal infomration about the file: <br />  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {String} opts.searchPattern 
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportsVM} and HTTP response
     */
    exportsGetFilesListWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetFilesList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'searchPattern': opts['searchPattern'],
        'orderBy': opts['orderBy'],
        'desc': opts['desc'],
        'useRegex': opts['useRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/Folder/{id}/ListFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all files from specified folder. <br />  User with Get Entity permission can access this method. <br />  The method will returns minimal infomration about the file: <br />  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * @param {String} id folder id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of files, that have to be skipped (default to 0)
     * @param {Number} opts.take number of files, that have to be returned (default to 10)
     * @param {String} opts.searchPattern 
     * @param {module:models/FileSorting} opts.orderBy 
     * @param {Boolean} opts.desc  (default to false)
     * @param {Boolean} opts.useRegex  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportsVM}
     */
    exportsGetFilesList(id, opts) {
      return this.exportsGetFilesListWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user's permissions to file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionCRUDVM} and HTTP response
     */
    exportsGetMyPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetMyPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionCRUDVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current user's permissions to file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionCRUDVM}
     */
    exportsGetMyPermissions(id) {
      return this.exportsGetMyPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FilePermissionsVM} and HTTP response
     */
    exportsGetPermissionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilePermissionsVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FilePermissionsVM}
     */
    exportsGetPermissions(id) {
      return this.exportsGetPermissionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all sharing keys, associated with the file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/FileSharingKeysVM} and HTTP response
     */
    exportsGetSharingKeysWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsGetSharingKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileSharingKeysVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/sharingKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all sharing keys, associated with the file
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/FileSharingKeysVM}
     */
    exportsGetSharingKeys(id) {
      return this.exportsGetSharingKeysWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsMoveFileWithHttpInfo(id, folderId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsMoveFile");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling exportsMoveFile");
      }

      let pathParams = {
        'id': id,
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/Move/{folderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param {String} id file id
     * @param {String} folderId folder id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsMoveFile(id, folderId) {
      return this.exportsMoveFileWithHttpInfo(id, folderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportsMoveFileToBinWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsMoveFileToBin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/ToBin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportsMoveFileToBin(id) {
      return this.exportsMoveFileToBinWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportsRecoverFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsRecoverFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recoveryPath': opts['recoveryPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param {String} id file id
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportsRecoverFile(id, opts) {
      return this.exportsRecoverFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileRenameVM} opts.fileRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsRenameFileWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileRenameVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsRenameFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/Rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileRenameVM} opts.fileRenameVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsRenameFile(id, opts) {
      return this.exportsRenameFileWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a files's icon
     * User with Update Icon permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileIconVM} opts.fileIconVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsUpdateIconWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileIconVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsUpdateIcon");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/Icon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a files's icon
     * User with Update Icon permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileIconVM} opts.fileIconVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsUpdateIcon(id, opts) {
      return this.exportsUpdateIconWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    exportsUpdatePermissionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['updateFilePermissionsVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsUpdatePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/UpdateFilePermissionsVM} opts.updateFilePermissionsVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    exportsUpdatePermissions(id, opts) {
      return this.exportsUpdatePermissionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileTagsUpdateVM} opts.fileTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ExportVM} and HTTP response
     */
    exportsUpdateTagsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fileTagsUpdateVM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportsUpdateTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'JWT'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = ExportVM;
      if(!returnType) returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/rp/v1/Exports/File/{id}/UpdateTags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:models/FileTagsUpdateVM} opts.fileTagsUpdateVM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ExportVM}
     */
    exportsUpdateTags(id, opts) {
      return this.exportsUpdateTagsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
