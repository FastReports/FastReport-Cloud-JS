/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDataSourceVM from './CreateDataSourceVM';
import DataSourceConnectionType from './DataSourceConnectionType';

/**
 * The CreateDataSourceAdminVM model module.
 * @module models/CreateDataSourceAdminVM
 * @version v1
 */
class CreateDataSourceAdminVM {
    /**
     * Constructs a new <code>CreateDataSourceAdminVM</code>.
     * @alias module:models/CreateDataSourceAdminVM
     * @extends module:models/CreateDataSourceVM
     * @implements module:models/CreateDataSourceVM
     * @param connectionString {String} 
     * @param subscriptionId {String} 
     */
    constructor(connectionString, subscriptionId) { 
        CreateDataSourceVM.initialize(this, connectionString, subscriptionId);
        CreateDataSourceAdminVM.initialize(this, connectionString, subscriptionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionString, subscriptionId) { 
        obj['ownerId'] = ownerId;
    }

    /**
     * Constructs a <code>CreateDataSourceAdminVM</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/CreateDataSourceAdminVM} obj Optional instance to populate.
     * @return {module:models/CreateDataSourceAdminVM} The populated <code>CreateDataSourceAdminVM</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDataSourceAdminVM();
            CreateDataSourceVM.constructFromObject(data, obj);
            CreateDataSourceVM.constructFromObject(data, obj);

            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDataSourceAdminVM</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDataSourceAdminVM</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDataSourceAdminVM.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }

        return true;
    }


}

CreateDataSourceAdminVM.RequiredProperties = ["ownerId", "connectionString", "subscriptionId"];

/**
 * @member {String} ownerId
 */
CreateDataSourceAdminVM.prototype['ownerId'] = undefined;


// Implement CreateDataSourceVM interface:
/**
 * @member {String} name
 */
CreateDataSourceVM.prototype['name'] = undefined;
/**
 * @member {String} connectionString
 */
CreateDataSourceVM.prototype['connectionString'] = undefined;
/**
 * @member {String} subscriptionId
 */
CreateDataSourceVM.prototype['subscriptionId'] = undefined;
/**
 * @member {module:models/DataSourceConnectionType} connectionType
 */
CreateDataSourceVM.prototype['connectionType'] = undefined;




export default CreateDataSourceAdminVM;

