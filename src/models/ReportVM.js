/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportInfo from './ReportInfo';

/**
 * The ReportVM model module.
 * @module models/ReportVM
 * @version v1
 */
class ReportVM {
    /**
     * Constructs a new <code>ReportVM</code>.
     * @alias module:models/ReportVM
     */
    constructor() { 
        
        ReportVM.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportVM</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ReportVM} obj Optional instance to populate.
     * @return {module:models/ReportVM} The populated <code>ReportVM</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportVM();

            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('reportInfo')) {
                obj['reportInfo'] = ReportInfo.constructFromObject(data['reportInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Blob');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusReason')) {
                obj['statusReason'] = ApiClient.convertToType(data['statusReason'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('creatorUserId')) {
                obj['creatorUserId'] = ApiClient.convertToType(data['creatorUserId'], 'String');
            }
            if (data.hasOwnProperty('editedTime')) {
                obj['editedTime'] = ApiClient.convertToType(data['editedTime'], 'Date');
            }
            if (data.hasOwnProperty('editorUserId')) {
                obj['editorUserId'] = ApiClient.convertToType(data['editorUserId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} templateId
 */
ReportVM.prototype['templateId'] = undefined;

/**
 * @member {module:models/ReportInfo} reportInfo
 */
ReportVM.prototype['reportInfo'] = undefined;

/**
 * @member {String} name
 */
ReportVM.prototype['name'] = undefined;

/**
 * @member {String} parentId
 */
ReportVM.prototype['parentId'] = undefined;

/**
 * @member {Array.<String>} tags
 */
ReportVM.prototype['tags'] = undefined;

/**
 * @member {Blob} icon
 */
ReportVM.prototype['icon'] = undefined;

/**
 * @member {module:models/ReportVM.TypeEnum} type
 */
ReportVM.prototype['type'] = undefined;

/**
 * @member {Number} size
 */
ReportVM.prototype['size'] = undefined;

/**
 * @member {String} subscriptionId
 */
ReportVM.prototype['subscriptionId'] = undefined;

/**
 * @member {module:models/ReportVM.StatusEnum} status
 */
ReportVM.prototype['status'] = undefined;

/**
 * @member {module:models/ReportVM.StatusReasonEnum} statusReason
 */
ReportVM.prototype['statusReason'] = undefined;

/**
 * @member {String} id
 */
ReportVM.prototype['id'] = undefined;

/**
 * @member {Date} createdTime
 */
ReportVM.prototype['createdTime'] = undefined;

/**
 * @member {String} creatorUserId
 */
ReportVM.prototype['creatorUserId'] = undefined;

/**
 * @member {Date} editedTime
 */
ReportVM.prototype['editedTime'] = undefined;

/**
 * @member {String} editorUserId
 */
ReportVM.prototype['editorUserId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReportVM['TypeEnum'] = {

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "Folder"
     * @const
     */
    "Folder": "Folder"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ReportVM['StatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "InQueue"
     * @const
     */
    "InQueue": "InQueue",

    /**
     * value: "InProcess"
     * @const
     */
    "InProcess": "InProcess",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>statusReason</code> property.
 * @enum {String}
 * @readonly
 */
ReportVM['StatusReasonEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "AllRight"
     * @const
     */
    "AllRight": "AllRight",

    /**
     * value: "Hang"
     * @const
     */
    "Hang": "Hang",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "NotFound"
     * @const
     */
    "NotFound": "NotFound",

    /**
     * value: "NotEnoughSpace"
     * @const
     */
    "NotEnoughSpace": "NotEnoughSpace",

    /**
     * value: "ExportStarted"
     * @const
     */
    "ExportStarted": "ExportStarted",

    /**
     * value: "PreparationStarted"
     * @const
     */
    "PreparationStarted": "PreparationStarted",

    /**
     * value: "CrashLoop"
     * @const
     */
    "CrashLoop": "CrashLoop"
};



export default ReportVM;

