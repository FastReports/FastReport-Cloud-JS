/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportVM model module.
 * @module models/ExportVM
 * @version v1
 */
class ExportVM {
    /**
     * Constructs a new <code>ExportVM</code>.
     * @alias module:models/ExportVM
     */
    constructor() { 
        
        ExportVM.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportVM</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ExportVM} obj Optional instance to populate.
     * @return {module:models/ExportVM} The populated <code>ExportVM</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportVM();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Blob');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusReason')) {
                obj['statusReason'] = ApiClient.convertToType(data['statusReason'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('creatorUserId')) {
                obj['creatorUserId'] = ApiClient.convertToType(data['creatorUserId'], 'String');
            }
            if (data.hasOwnProperty('editedTime')) {
                obj['editedTime'] = ApiClient.convertToType(data['editedTime'], 'Date');
            }
            if (data.hasOwnProperty('editorUserId')) {
                obj['editorUserId'] = ApiClient.convertToType(data['editorUserId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:models/ExportVM.FormatEnum} format
 */
ExportVM.prototype['format'] = undefined;

/**
 * @member {String} reportId
 */
ExportVM.prototype['reportId'] = undefined;

/**
 * @member {String} name
 */
ExportVM.prototype['name'] = undefined;

/**
 * @member {String} parentId
 */
ExportVM.prototype['parentId'] = undefined;

/**
 * @member {Array.<String>} tags
 */
ExportVM.prototype['tags'] = undefined;

/**
 * @member {Blob} icon
 */
ExportVM.prototype['icon'] = undefined;

/**
 * @member {module:models/ExportVM.TypeEnum} type
 */
ExportVM.prototype['type'] = undefined;

/**
 * @member {Number} size
 */
ExportVM.prototype['size'] = undefined;

/**
 * @member {String} subscriptionId
 */
ExportVM.prototype['subscriptionId'] = undefined;

/**
 * @member {module:models/ExportVM.StatusEnum} status
 */
ExportVM.prototype['status'] = undefined;

/**
 * @member {module:models/ExportVM.StatusReasonEnum} statusReason
 */
ExportVM.prototype['statusReason'] = undefined;

/**
 * @member {String} id
 */
ExportVM.prototype['id'] = undefined;

/**
 * @member {Date} createdTime
 */
ExportVM.prototype['createdTime'] = undefined;

/**
 * @member {String} creatorUserId
 */
ExportVM.prototype['creatorUserId'] = undefined;

/**
 * @member {Date} editedTime
 */
ExportVM.prototype['editedTime'] = undefined;

/**
 * @member {String} editorUserId
 */
ExportVM.prototype['editorUserId'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
ExportVM['FormatEnum'] = {

    /**
     * value: "Pdf"
     * @const
     */
    "Pdf": "Pdf",

    /**
     * value: "Html"
     * @const
     */
    "Html": "Html",

    /**
     * value: "Mht"
     * @const
     */
    "Mht": "Mht",

    /**
     * value: "Image"
     * @const
     */
    "Image": "Image",

    /**
     * value: "Biff8"
     * @const
     */
    "Biff8": "Biff8",

    /**
     * value: "Csv"
     * @const
     */
    "Csv": "Csv",

    /**
     * value: "Dbf"
     * @const
     */
    "Dbf": "Dbf",

    /**
     * value: "Json"
     * @const
     */
    "Json": "Json",

    /**
     * value: "LaTeX"
     * @const
     */
    "LaTeX": "LaTeX",

    /**
     * value: "Odt"
     * @const
     */
    "Odt": "Odt",

    /**
     * value: "Ods"
     * @const
     */
    "Ods": "Ods",

    /**
     * value: "Docx"
     * @const
     */
    "Docx": "Docx",

    /**
     * value: "Pptx"
     * @const
     */
    "Pptx": "Pptx",

    /**
     * value: "Xlsx"
     * @const
     */
    "Xlsx": "Xlsx",

    /**
     * value: "Xps"
     * @const
     */
    "Xps": "Xps",

    /**
     * value: "Ppml"
     * @const
     */
    "Ppml": "Ppml",

    /**
     * value: "PS"
     * @const
     */
    "PS": "PS",

    /**
     * value: "Richtext"
     * @const
     */
    "Richtext": "Richtext",

    /**
     * value: "Svg"
     * @const
     */
    "Svg": "Svg",

    /**
     * value: "Text"
     * @const
     */
    "Text": "Text",

    /**
     * value: "Xaml"
     * @const
     */
    "Xaml": "Xaml",

    /**
     * value: "Xml"
     * @const
     */
    "Xml": "Xml",

    /**
     * value: "Zpl"
     * @const
     */
    "Zpl": "Zpl"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ExportVM['TypeEnum'] = {

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "Folder"
     * @const
     */
    "Folder": "Folder"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ExportVM['StatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "InQueue"
     * @const
     */
    "InQueue": "InQueue",

    /**
     * value: "InProcess"
     * @const
     */
    "InProcess": "InProcess",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>statusReason</code> property.
 * @enum {String}
 * @readonly
 */
ExportVM['StatusReasonEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "AllRight"
     * @const
     */
    "AllRight": "AllRight",

    /**
     * value: "Hang"
     * @const
     */
    "Hang": "Hang",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "NotFound"
     * @const
     */
    "NotFound": "NotFound",

    /**
     * value: "NotEnoughSpace"
     * @const
     */
    "NotEnoughSpace": "NotEnoughSpace",

    /**
     * value: "ExportStarted"
     * @const
     */
    "ExportStarted": "ExportStarted",

    /**
     * value: "PreparationStarted"
     * @const
     */
    "PreparationStarted": "PreparationStarted"
};



export default ExportVM;

