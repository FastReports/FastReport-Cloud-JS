/**
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactVM model module.
 * @module models/ContactVM
 * @version v1
 */
class ContactVM {
    /**
     * Constructs a new <code>ContactVM</code>.
     * @alias module:models/ContactVM
     */
    constructor() { 
        
        ContactVM.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactVM</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ContactVM} obj Optional instance to populate.
     * @return {module:models/ContactVM} The populated <code>ContactVM</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactVM();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('creatorUserId')) {
                obj['creatorUserId'] = ApiClient.convertToType(data['creatorUserId'], 'String');
            }
            if (data.hasOwnProperty('editedTime')) {
                obj['editedTime'] = ApiClient.convertToType(data['editedTime'], 'Date');
            }
            if (data.hasOwnProperty('editorUserId')) {
                obj['editorUserId'] = ApiClient.convertToType(data['editorUserId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactVM</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactVM</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['creatorUserId'] && !(typeof data['creatorUserId'] === 'string' || data['creatorUserId'] instanceof String)) {
            throw new Error("Expected the field `creatorUserId` to be a primitive type in the JSON string but got " + data['creatorUserId']);
        }
        // ensure the json data is a string
        if (data['editorUserId'] && !(typeof data['editorUserId'] === 'string' || data['editorUserId'] instanceof String)) {
            throw new Error("Expected the field `editorUserId` to be a primitive type in the JSON string but got " + data['editorUserId']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ContactVM.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ContactVM.prototype['name'] = undefined;

/**
 * @member {String} email
 */
ContactVM.prototype['email'] = undefined;

/**
 * @member {Array.<String>} groups
 */
ContactVM.prototype['groups'] = undefined;

/**
 * @member {String} subscriptionId
 */
ContactVM.prototype['subscriptionId'] = undefined;

/**
 * @member {Date} createdTime
 */
ContactVM.prototype['createdTime'] = undefined;

/**
 * @member {String} creatorUserId
 */
ContactVM.prototype['creatorUserId'] = undefined;

/**
 * @member {Date} editedTime
 */
ContactVM.prototype['editedTime'] = undefined;

/**
 * @member {String} editorUserId
 */
ContactVM.prototype['editorUserId'] = undefined;






export default ContactVM;

